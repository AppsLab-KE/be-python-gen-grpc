# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import otp_pb2 as otp__pb2
from . import server_pb2 as server__pb2


class OtpServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/otp.OtpService/HealthCheck',
                request_serializer=server__pb2.DefaultRequest.SerializeToString,
                response_deserializer=server__pb2.HealthResponse.FromString,
                )
        self.CreateAndSendOtp = channel.unary_unary(
                '/otp.OtpService/CreateAndSendOtp',
                request_serializer=otp__pb2.CreateAndSendOtpReq.SerializeToString,
                response_deserializer=otp__pb2.CreateAndSendOtpRes.FromString,
                )
        self.VerifyOtp = channel.unary_unary(
                '/otp.OtpService/VerifyOtp',
                request_serializer=otp__pb2.VerifyOTPReq.SerializeToString,
                response_deserializer=otp__pb2.VerifyOTPRes.FromString,
                )
        self.ResendOTP = channel.unary_unary(
                '/otp.OtpService/ResendOTP',
                request_serializer=otp__pb2.ResendOTPReq.SerializeToString,
                response_deserializer=otp__pb2.ResendOTPRes.FromString,
                )


class OtpServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAndSendOtp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyOtp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResendOTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OtpServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=server__pb2.DefaultRequest.FromString,
                    response_serializer=server__pb2.HealthResponse.SerializeToString,
            ),
            'CreateAndSendOtp': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAndSendOtp,
                    request_deserializer=otp__pb2.CreateAndSendOtpReq.FromString,
                    response_serializer=otp__pb2.CreateAndSendOtpRes.SerializeToString,
            ),
            'VerifyOtp': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyOtp,
                    request_deserializer=otp__pb2.VerifyOTPReq.FromString,
                    response_serializer=otp__pb2.VerifyOTPRes.SerializeToString,
            ),
            'ResendOTP': grpc.unary_unary_rpc_method_handler(
                    servicer.ResendOTP,
                    request_deserializer=otp__pb2.ResendOTPReq.FromString,
                    response_serializer=otp__pb2.ResendOTPRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'otp.OtpService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OtpService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otp.OtpService/HealthCheck',
            server__pb2.DefaultRequest.SerializeToString,
            server__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAndSendOtp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otp.OtpService/CreateAndSendOtp',
            otp__pb2.CreateAndSendOtpReq.SerializeToString,
            otp__pb2.CreateAndSendOtpRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyOtp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otp.OtpService/VerifyOtp',
            otp__pb2.VerifyOTPReq.SerializeToString,
            otp__pb2.VerifyOTPRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResendOTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/otp.OtpService/ResendOTP',
            otp__pb2.ResendOTPReq.SerializeToString,
            otp__pb2.ResendOTPRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
